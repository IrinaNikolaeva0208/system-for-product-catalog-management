version: '3.9'

services:
  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: src/api-gateway/Dockerfile
    restart: always
    networks:
      - app-network
      - broker
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    depends_on:
      - postgres
      - auth
      - catalog
      - basket
      - orders
    command: yarn run start

  auth:
    container_name: auth
    build:
      context: .
      dockerfile: src/auth/Dockerfile
    restart: always
    networks:
      - app-network
      - broker
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    depends_on:
      - postgres
    command: yarn run start

  catalog:
    container_name: catalog
    build:
      context: .
      dockerfile: src/catalog/Dockerfile
    restart: always
    networks:
      - app-network
      - broker
    ports:
      - ${CATALOG_PORT}:${CATALOG_PORT}
    depends_on:
      - postgres
      - kafka
    command: yarn run start

  basket:
    container_name: basket
    build:
      context: .
      dockerfile: src/basket/Dockerfile
    restart: always
    networks:
      - app-network
      - broker
    ports:
      - ${BASKET_PORT}:${BASKET_PORT}
    depends_on:
      - postgres
      - kafka
    command: yarn run start

  orders:
    container_name: orders
    build:
      context: .
      dockerfile: src/orders/Dockerfile
    restart: always
    networks:
      - app-network
      - broker
    ports:
      - ${ORDERS_PORT}:${ORDERS_PORT}
    depends_on:
      - postgres
    command: yarn run start

  postgres:
    container_name: postgres1
    image: postgres:15-alpine
    restart: always
    networks:
      - app-network
    ports:
      - "${DB_PORT}:${POSTGRES_PORT}"
    env_file:
      - .env

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - broker

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - broker
  
  redis:
    container_name: redis
    image: redis
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis:/data
    networks:
      - app-network

  stripe-cli:
    image: stripe/stripe-cli
    container_name: stripe-cli
    command: "listen --api-key ${STRIPE_API_KEY} --forward-to orders:${ORDERS_PORT}/stripe_webhook/"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
  broker:
    driver: bridge

volumes:
  app-volume:
  redis:
    driver: local


